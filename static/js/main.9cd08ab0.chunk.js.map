{"version":3,"sources":["withRoot.js","Components/AppBar.js","pages/index.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","blue","main","dark","secondary","lightGreen","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","styles","CssBaseline_default","ButtonAppBar","state","isDrawerOpen","isNotificationsDrawerOpen","toggleDrawer","side","open","_this","setState","Object","defineProperty","handleFriendsClick","_this2","this","classes","sideList","className","list","List_default","ListItem_default","button","onClick","ListItemIcon_default","AccountCircle_default","ListItemText_default","Group_default","map","text","index","key","root","AppBar_default","position","Toolbar_default","Button_default","menuButton","color","aria-label","Menu_default","Drawer_default","anchor","left","onClose","tabIndex","role","onKeyDown","Typography_default","variant","grow","React","withStyles","flexGrow","marginLeft","marginRight","width","inputProps","step","options","Index","handleClose","handleClick","handleEntering","radioGroupRef","focus","handleCancel","value","handleOk","handleChange","event","_this$props","objectWithoutProperties","top","Components_AppBar","dense","Avatar_default","alt","src","concat","fab","Add_default","Dialog_default","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","margin","label","type","fullWidth","RadioGroup_default","ref","name","onChange","option","FormControlLabel_default","control","Radio_default","DialogActions_default","bottom","spacing","unit","right","textAlign","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","pages","document","getElementById"],"mappings":"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","file":"static/js/main.9cd08ab0.chunk.js","sourcesContent":["import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700],\n    },\n    secondary: {\n      light: lightGreen[300],\n      main: lightGreen[500],\n      dark: lightGreen[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport Drawer from '@material-ui/core/Drawer';\nimport Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Group from '@material-ui/icons/Group';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  list:{\n    width: 250,\n  }\n};\n\n\n\nclass ButtonAppBar extends React.Component {\n  state = { \n    isDrawerOpen: false,\n    isNotificationsDrawerOpen: false,\n  };\n\n  toggleDrawer = (side, open)=>()=>{\n    this.setState({\n      [side]: open\n    });\n  };\n\n  handleFriendsClick = () => {\n    \n  };\n\n  render(){\n    const{classes} = this.props;\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          <ListItem button onClick={() => this.handleFriendsClick()}>\n            <ListItemIcon><AccountCircle/></ListItemIcon>\n            <ListItemText primary=\"Profile\"/>\n          </ListItem>\n\n          <ListItem button >\n            <ListItemIcon><Group/></ListItemIcon>\n            <ListItemText primary=\"Friends\"/>\n          </ListItem>\n          \n        </List>\n      </div>\n    );\n\n    const AlertList = (\n     <div className={classes.list}>\n        <List>\n          {['You owe Friend1 Money', 'Friend2 owes you money'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 ===0 ? <Group/>:<Group/>}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Button \n              className={classes.menuButton} \n              color=\"inherit\" \n              aria-label=\"Open drawer\"\n              onClick={this.toggleDrawer('left', true)}\n              >\n              <MenuIcon />\n            </Button>\n            <Drawer anchor=\"left\" open={this.state.left} onClose={this.toggleDrawer('left', false)}>\n              <div\n                tabIndex={0}\n                role=\"button\"\n                onClick={this.toggleDrawer('left', false)}\n                onKeyDown={this.toggleDrawer('left', false)}\n              >\n                {sideList}\n              </div>\n            </Drawer>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n              Splitmo\n            </Typography>\n            {/*<IconButton color=\"inherit\">\n              <Badge badgeContent={2} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>*/}\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  };\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport TextField from '@material-ui/core/TextField';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport AddAPhoto from '@material-ui/icons/AddAPhoto';\nimport AddIcon from '@material-ui/icons/Add';\nimport withRoot from '../withRoot';\nimport AppBar from '../Components/AppBar.js'\n\nconst styles = theme => ({\n  fab: {\n    margin: 0,\n    top: 'auto',\n    left: 'auto',\n    bottom: theme.spacing.unit*2,\n    right: theme.spacing.unit*2,\n    position: 'fixed',\n  },\n  top:{\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit*0,\n  },\n});\n\nconst inputProps = {\n  step: 0.01,\n};\n\nconst options = [\n  'Food',\n  'Recreation',\n  'Shopping',\n  'Bills',\n];\n\nclass Index extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  handleClick = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  handleEntering = () => {\n    this.radioGroupRef.focus();\n  };\n\n  handleCancel = () => {\n    this.props.onClose(this.props.value);\n  };\n\n  handleOk = () => {\n    this.props.onClose(this.state.value);\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { value, ...other } = this.props;\n    const { classes } = this.props;\n    const { open } = this.state;\n\n    return (\n      <div>\n          <div className={classes.top}>\n          <AppBar/>\n          <List>\n          {[0, 1, 2, 3, 4, 5, 6].map(value => (\n            <ListItem key={value} dense button>\n              <Avatar alt=\"Remy Sharp\" src=\"http://multisim-insigneo.org/wp-content/uploads/2015/02/blank-profile-picture-300x300.png\" />\n              <ListItemText primary={`Split Activity ${value + 1}`} />\n            </ListItem>\n          ))}\n        </List>\n          </div>\n\n          <div className={classes.fab}>\n            <Button variant=\"fab\" color=\"primary\" aria-label=\"Add\" onClick={this.handleClick}>\n              <AddIcon/>\n            </Button>\n          </div>\n          <div>\n            <Dialog\n              open={this.state.open}\n              onClose={this.handleClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">Create Split Activity</DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  To split a purchase please enter a description, the total cost, and the number of people involved.\n                </DialogContentText>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"standard-required\"\n                  label=\"Description of purchase\"\n                  type=\"text\"\n                  fullWidth\n                />\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"standard-required\"\n                  label=\"Total Cost\"\n                  type=\"number\"\n                  inputProps={inputProps}\n                  fullWidth\n                />\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"standard-required\"\n                  label=\"Total people\"\n                  type=\"number\"\n                  fullWidth\n                />\n              </DialogContent>\n              <DialogTitle id=\"confirmation-dialog-title\">Activity Type</DialogTitle>\n                <DialogContent>\n                  <RadioGroup\n                    ref={ref => {\n                      this.radioGroupRef = ref;\n                    }}\n                    aria-label=\"Ringtone\"\n                    name=\"ringtone\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                  >\n                    {options.map(option => (\n                      <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n                    ))}\n                  </RadioGroup>\n                  <Button onClick={this.handleClose} color=\"primary\">                   \n                    Add a picture of receipt\n                  </Button>\n                </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Next\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n      </div>\n    );\n  }\n}\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(Index));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Index from './pages/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}